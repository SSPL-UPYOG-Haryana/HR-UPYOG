"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _get = require("lodash/get");

var _get2 = _interopRequireDefault(_get);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

require("./styles.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AutoSelector = function (_React$Component) {
  _inherits(AutoSelector, _React$Component);

  function AutoSelector(props) {
    _classCallCheck(this, AutoSelector);

    var _this = _possibleConstructorReturn(this, (AutoSelector.__proto__ || Object.getPrototypeOf(AutoSelector)).call(this, props));

    _initialiseProps.call(_this);

    var _this$props = _this.props,
        data = _this$props.data,
        showDropdown = _this$props.showDropdown,
        defaultSelection = _this$props.defaultSelection;

    _this.state = {
      currentHoverIndex: null,
      currentSelection: defaultSelection,
      placeHolderText: null,
      currentData: data,
      showDropdown: showDropdown,
      currentMultipleSelections: []
    };
    return _this;
  }

  _createClass(AutoSelector, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          currentSelection = _state.currentSelection,
          currentHoverIndex = _state.currentHoverIndex,
          showDropdown = _state.showDropdown,
          currentData = _state.currentData;
      var _props = this.props,
          listContainerClassName = _props.listContainerClassName,
          containerclassName = _props.containerclassName,
          errorMessage = _props.errorMessage,
          label = _props.label;
      var onItemClick = this.onItemClick;

      var selectHeader = this.getListItemStyling(currentSelection, true) || this.getInputHeader();
      return _react2.default.createElement(
        "div",
        { className: "select " + containerclassName },
        label && _react2.default.createElement(
          "label",
          {
            className: (0, _classnames2.default)("field-label", {
              "focused-label": showDropdown
            })
          },
          label
        ),
        selectHeader,
        !showDropdown && errorMessage && _react2.default.createElement(
          "span",
          { className: "error-message" },
          errorMessage
        ),
        !!showDropdown && _react2.default.createElement(
          "ul",
          { className: "dropdown-list " + listContainerClassName },
          currentData.map(function (listItem, index) {
            return _react2.default.createElement(
              "li",
              {
                key: index,
                "data-id": index,
                className: (0, _classnames2.default)("option", {
                  "hover-style": currentHoverIndex === index
                }),
                onClick: function onClick(e) {
                  onItemClick(e);
                }
              },
              _this2.getListItemStyling(listItem)
            );
          })
        )
      );
    }
  }]);

  return AutoSelector;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.handleKeyPress = function (e) {
    var _state2 = _this3.state,
        currentHoverIndex = _state2.currentHoverIndex,
        currentData = _state2.currentData;

    if (e.keyCode === 38 && currentHoverIndex > 0) {
      _this3.setState(function (prevState) {
        return {
          currentHoverIndex: prevState.currentHoverIndex - 1
        };
      });
    } else if (e.keyCode === 40 && currentHoverIndex < currentData.length - 1) {
      _this3.setState(function (prevState) {
        return {
          currentHoverIndex: prevState.currentHoverIndex + 1
        };
      });
    } else if (e.keyCode === 13) {
      _this3.setState({
        currentSelection: currentData[currentHoverIndex],
        currentHoverIndex: null,
        showDropdown: false
      });
    }
  };

  this.onItemClick = function (e) {
    var _props2 = _this3.props,
        onSelectItem = _props2.onSelectItem,
        isMultipleSelection = _props2.isMultipleSelection;
    var currentData = _this3.state.currentData;

    var selectedIndex = e.currentTarget.getAttribute("data-id");
    var currentItem = currentData[selectedIndex];
    _this3.setState({
      currentSelection: currentItem,
      showDropdown: false
    }, function () {
      onSelectItem && onSelectItem(currentItem);
    });
  };

  this.getSelectedItemListingStyle = function (listItem) {
    var getSelectedItemListingStyle = _this3.props.getSelectedItemListingStyle;

    if (getSelectedItemListingStyle) {
      return getSelectedItemListingStyle(listItem);
    }
    return listItem;
  };

  this.getItemListingStyle = function (listItem) {
    var getItemListingStyle = _this3.props.getItemListingStyle;

    if (getItemListingStyle) {
      return getItemListingStyle(listItem);
    }
    return listItem;
  };

  this.getListItemStyling = function (listItem) {
    var isSelectionDone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var isDropDownIcon = _this3.props.isDropDownIcon;

    if (listItem && isSelectionDone) {
      return _react2.default.createElement(
        "div",
        {
          onClick: function onClick() {
            _this3.toggleDropdown();
          },
          onKeyDown: _this3.handleKeyPress,
          className: (0, _classnames2.default)("selected-input", {
            dropdown: isDropDownIcon
          }),
          tabindex: "1"
        },
        _this3.getSelectedItemListingStyle(listItem)
      );
    }
    return _this3.getItemListingStyle(listItem);
  };

  this.toggleDropdown = function () {
    _this3.setState(function (prevState) {
      return {
        showDropdown: !prevState.showDropdown
      };
    });
  };

  this.getCoreInputElement = function () {
    var _props3 = _this3.props,
        isDropDownIcon = _props3.isDropDownIcon,
        readonly = _props3.readonly,
        _onFocus = _props3.onFocus,
        _onClick = _props3.onClick,
        _onChange = _props3.onChange,
        onBlur = _props3.onBlur,
        isError = _props3.isError;
    var showDropdown = _this3.state.showDropdown;

    return _react2.default.createElement("input", {
      onKeyDown: _this3.handleKeyPress,
      readonly: readonly,
      onFocus: function onFocus() {
        _onFocus && _onFocus();
      },
      onClick: function onClick() {
        _this3.toggleDropdown();
        _onClick && _onClick();
      },
      onChange: function onChange(e) {
        var userInput = (0, _get2.default)(e, "target.value", "");
        _onChange && _onChange(userInput);
      },
      className: (0, _classnames2.default)("field-label", {
        "error-dropdown": isError
      })
    });
  };

  this.getInputHeader = function () {
    var isDropDownIcon = _this3.props.isDropDownIcon;

    return isDropDownIcon ? _react2.default.createElement(
      "div",
      { className: "dropdown" },
      _this3.getCoreInputElement()
    ) : _this3.getCoreInputElement();
  };
};

exports.default = AutoSelector;